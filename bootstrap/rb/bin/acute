#!/usr/bin/env ruby

begin
  require 'rubygems'
  require 'bundler/setup'
rescue LoadError => e
  e.render
end

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'getoptlong'
require 'parslet'
require 'acute'
require 'pp'

opts = GetoptLong.new(
  ['--eval', '-e', GetoptLong::REQUIRED_ARGUMENT],
  ['--repl', '-i', GetoptLong::NO_ARGUMENT],
  ['--help', '-h', GetoptLong::NO_ARGUMENT]
)

bench = false
repl = false
file = nil
eval_string = nil
evals = []

opts.each do |opt, arg|
  case opt
    when '--help'
      usage
      exit 1
    when '--repl'
      repl = true
    when '--eval'
      eval_string = arg
  end
end

display = proc do |code|
  parser = Acute::Parser.new

  if bench
    require 'benchmark'
    Benchmark.bmbm do |x|
      x.report { tree = parser.parse(code) }
    end
  else
    tree = parser.parse(code)
  end

  begin
    puts "Message: " + tree.to_s
    lobby = ::Acute::Object.new(true)
    lobby.register("Lobby", lobby)
    lobby.register("Object", ::Acute::Object.new(true))
    lobby.register("List", ::Acute::List.new)
    lobby.register("String", ::Acute::String.new)
    walker = ::Acute::Walker.new(lobby, tree)
    walker.walk { |obj| puts "=> " + obj.to_s }
  end
end

file = ARGV.last unless repl or eval_string
if file
  evals << File.read(file)
elsif eval_string
  evals << eval_string
end

if evals.empty?
  if $stdin.tty?
    require 'readline'
    loop do
      code = Readline.readline "Acute> "
      exit 0 unless code and code != "exit"
      display[code]
    end
  else
    evals << STDIN.read
  end
end

evals.each(&display)
