%{
#define YYSTYPE void*
#define YY_DEBUG 

#include "message.h"

msg_t* root;
%}

#expression
start      = r:expression {root = r;} 
expression = current:atom nxt:expression?                                           {
        if(current)
        {
            ((msg_t*)current)->next = nxt;
            $$ = current;
        }
        else
            $$ = nxt;
    }
atom       = literal | message | sugar-separator | insignificant-separator

#messages
message            = multi-arg-message | single-arg-message | no-arg-message
no-arg-message     = identifier:identifier                                         {$$ = msg_new((char*)identifier, NULL, NULL); }
single-arg-message = identifier:identifier? single-opener arg:single-arg?          {
        list_t* list = list_new_size(1);
        list_append(list, (msg_t*)arg);
        $$ = msg_new((char*)identifier, list, NULL);
    }
multi-arg-message  = identifier:identifier? opener arg:arglist? closer             {$$ = msg_new((char*)identifier, (list_t*)arg, NULL);}
single-arg         = separator? (literal | message)
arglist            = data:expression (comma next:arglist)?                         {
        list_t* list = list_new();
        list_append(list, data);
        list_append_list(list, next);
        $$ = list;
    }
identifier         = < ([a-zA-Z0-9_+*|!@$%^&=.?<>~;\\/]|'-')+ >                    {$$ = strdup(yytext);}

#syntactic sugar having a profound effect on other rules
sugar-separator = terminating-separator !terminator                                {$$ = msg_new(";", NULL, NULL);}
insignificant-separator = separator                                                {$$ = NULL}

#literals
literal = number | string
number  = < (('+' | '-')? [0-9]+) >                                                {$$ = (void*)atoi((char*)yytext);}
string  = ["] < (('\\' .)|(!["] .))* > ["]                                         {
        char* identifier = (char*)strdup(yytext);
        $$ = msg_new(identifier, NULL, NULL);
        free(identifier);
    } #TODO

#guides
single-opener = ':'
opener        = '('
closer        = ')'
comma         = ','
terminator    = closer | comma | ';' | !.

#separators
separator                 = terminating-separator | non-terminating-separator
terminating-separator     = non-terminating-separator? "\n" (non-terminating-separator | "\n")*
non-terminating-separator = (' ' | "\t")+

%%
int main() {
    yyparse();
    msg_t* r = root;
    return 0;
}
